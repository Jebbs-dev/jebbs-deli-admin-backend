generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  VENDOR
}

enum Category {
  meal
  drink
  snack
  dessert
  sides
  small_chops
  chicken
  pizza
  burger
}

enum SizeValue {
  small
  medium
  large
}

enum OrderStatus {
  pending
  delivered
  cancelled
}

enum PaymentStatus {
  pending
  processing
  success
  failed
  abandoned
  reversed
  ongoing
  queued
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  password  String
  telephone String?
  avatar    String?
  address   String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart     Cart?
  orders   Order[]
  payments Payment[]
  Token    Token[]
  store    Store?

  @@map("users")
}

model Store {
  id     String  @id @default(uuid())
  name   String
  userId String? @unique

  email           String
  telephone       String?
  address         String
  billboard       String?
  logo            String?
  preparationTime String?
  openingTime     String?
  closingTime     String?
  rating          Float?
  totalReviews    Int?
  deliveryFee     Float   @default(0)

  tags      String[]
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  admin          User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  products       Product[]        @relation("StoreToProduct")
  orders         Order[]          @relation("StoreToOrder")
  payments       Payment[]        @relation("StoreToPayment")
  CartStoreGroup CartStoreGroup[]
  OrderItem      OrderItem[]

  @@map("stores")
}

model Address {
  id          String   @id @default(uuid())
  description String
  place_id    String
  reference   String
  types       String[]
  createdAt   DateTime @default(now())
}

model Cart {
  id         String   @id @default(uuid())
  userId     String?  @unique
  sessionId  String?  @unique
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  cartGroups CartStoreGroup[]
  user       User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartStoreGroup {
  id        String   @id @default(uuid())
  cartId    String
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart      Cart       @relation(fields: [cartId], references: [id], onDelete: Cascade)
  store     Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
}

model CartItem {
  id               String @id @default(uuid())
  cartStoreGroupId String
  productId        String
  quantity         Int

  cartStoreGroup CartStoreGroup @relation(fields: [cartStoreGroupId], references: [id], onDelete: Cascade)
  product        Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String
  price       Float
  image       String
  stock       Int?
  category    Category   @default(meal)
  storeId     String
  discountId  String?
  storeTag    String?
  // size        Size?    @relation(fields: [sizeId], references: [id])
  size        SizeValue?
  isAvailable Boolean
  isFeatured  Boolean
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  discount Discount? @relation(fields: [discountId], references: [id], onDelete: SetNull)

  store Store @relation("StoreToProduct", fields: [storeId], references: [id], onDelete: Cascade)

  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("products")
}

model Discount {
  id              String   @id @default(uuid())
  code            String   @unique
  discountPercent Float
  isActive        Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  products Product[]
}

model Order {
  id              String      @id @default(uuid())
  userId          String
  storeId         String
  serviceFee      Float
  deliveryFee     Float
  subTotal        Float
  totalPrice      Float
  vendorAddress   String
  customerAddress String
  status          OrderStatus @default(pending)
  createdAt       DateTime    @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment Payment?

  orderItems OrderItem[]
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String @id @default(uuid())
  storeId   String
  orderId   String
  productId String
  quantity  Int

  store   Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model PaystackTransaction {
  id        BigInt? @unique
  paymentId String  @unique

  reference     String  @unique
  receiptNumber String?

  message    String?
  accessCode String?

  currency String @default("NGN")
  amount   Int

  plan               Json?
  split              Json?
  subaccount         Json?
  orderId            String?
  requestedAmount    Int?
  source             Json?
  connect            Json?
  posTransactionData Json?

  fees      Int?
  feesSplit Json?

  status          PaymentStatus @default(pending)
  channel         String?
  gatewayResponse String?

  domain        String  @default("live")
  ipAddress     String?
  metadata      Json?
  log           Json?
  authorization Json?
  customer      Json?

  webhookVerified   Boolean   @default(false)
  webhookSignature  String?
  webhookReceivedAt DateTime?

  createdAt DateTime  @default(now())
  paidAt    DateTime? // When paid on Paystack

  payment Payment?

  @@index([id])
  @@index([reference])
  @@index([accessCode])
  @@index([status])
  @@index([webhookVerified])
}

// Main Payment schema - clean business logic
model Payment {
  id            String        @id @default(uuid())
  userId        String
  orderId       String        @unique
  storeId       String
  paystackId    BigInt?       @unique
  amount        Float
  reference     String        @unique
  status        PaymentStatus @default(pending)
  paymentMethod String?
  currency      String        @default("NGN")
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paidAt        DateTime?

  // Relationships
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  order               Order?               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  store               Store                @relation("StoreToPayment", fields: [storeId], references: [id])
  paystackTransaction PaystackTransaction? @relation(fields: [paystackId], references: [id])

  @@index([userId])
  @@index([storeId])
  @@index([status])
  @@index([createdAt])
}

model Token {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresIn Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
