generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  VENDOR
}

enum Category {
  meal
  drink
  snack
  dessert
  sides
  small_chops
  chicken
  pizza
  burger
}

enum SizeValue {
  small
  medium
  large
}

enum OrderStatus {
  pending
  delivered
  cancelled
}

enum PaymentStatus {
  pending
  success
  failed
  refunded
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  password  String
  telephone String?
  avatar    String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart     Cart?
  orders   Order[]
  payments Payment[]
  Token    Token[]

  @@map("users")
}

model Vendor {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  telephone String?
  address   String
  logo      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  products Product[] @relation("VendorToProduct")
  orders   Order[]   @relation("VendorToOrder")
  payments Payment[] @relation("VendorToPayment")

  @@map("vendors")
}

model Cart {
  id         String   @id @default(uuid())
  userId     String?  @unique // Nullable for guest users
  sessionId  String?  @unique // For guest users, store session-based carts
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  cartItems CartItem[]
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  id        String @id @default(uuid())
  cartId    String
  productId String
  quantity  Int

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// model Size {
//   id        String    @id @default(uuid())
//   name      String
//   value     SizeValue @default(medium)
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt

//   products Product[]
// }

model Product {
  id          String     @id @default(uuid())
  name        String
  description String
  price       Float
  image       String
  stock       Int?
  category    Category   @default(meal)
  vendorId    String
  discountId  String?
  // size        Size?    @relation(fields: [sizeId], references: [id])
  size        SizeValue?
  isAvailable Boolean
  isFeatured  Boolean
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  discount Discount? @relation(fields: [discountId], references: [id], onDelete: SetNull)

  vendor Vendor @relation("VendorToProduct", fields: [vendorId], references: [id], onDelete: Cascade)

  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("products")
}

model Discount {
  id              String   @id @default(uuid())
  code            String   @unique
  discountPercent Float
  isActive        Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  products Product[]
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  vendorId   String
  totalPrice Float
  status     OrderStatus @default(pending)
  createdAt  DateTime    @default(now())

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  payment    Payment?

  vendor Vendor @relation("VendorToOrder", fields: [vendorId], references: [id])
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String        @id @default(uuid())
  userId        String
  orderId       String?       @unique
  vendorId      String
  amount        Float
  reference     String        @unique
  status        PaymentStatus @default(pending)
  paymentMethod String
  currency      String        @default("NGN")
  createdAt     DateTime      @default(now())
  paidAt        DateTime?

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)

  vendor Vendor @relation("VendorToPayment", fields: [vendorId], references: [id])
}

model Token {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresIn Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
